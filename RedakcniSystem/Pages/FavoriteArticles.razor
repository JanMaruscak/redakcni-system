@page "/favorites"
@using RedakcniSystem.Data
@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@inject ArticleService ArticleService
@inject NavigationManager NavigationManager;
@inject IHttpContextAccessor IHttp
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UsersService UsersService

<div class="card-deck">
    @foreach (var article in articles)
    {
        @if (!Liked.Any(x => x.Article == article.Id))
        {
            continue;
        }
        <div class="card">
            <img class="card-img-top" src="@article.ImageUrl" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">@article.Title</h5>
                <p class="card-text">@article.ShortText</p>
                <p class="card-text"><small class="text-muted">@article.Created.Date.ToString("MMMM dd, yyyy")</small></p>
              <AuthorizeView>
                  <Authorized>
                      @if (!Liked.Any(x => x.Article == article.Id))
                      {<button class="btn btn-block btn-primary"><i class="fa fa-thumbs-up">Like</i> </button>
                          <button type="button" class="btn btn-success" @onclick="() => LikeArticle(article.Id)">Like</button>
                      }
                      else
                      {
                          <button type="button" class="btn btn-success" @onclick="() => UnLikeArticle(article.Id)">Unlike</button>
                      }
                      <button type="button" class="btn btn-primary" @onclick="() => ViewArticle(article.Id)">View</button>
                      <button type="button" class="btn btn-secondary" @onclick="() => EditArticle(article.Id)">Edit</button>
                      <button type="button" class="btn btn-danger" @onclick="() => DeleteArticle(article.Id)">Delete</button>
                  </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-primary" @onclick="() => ViewArticle(article.Id)">View</button>
                    </NotAuthorized>
              </AuthorizeView>
            </div>
        </div>
    }
</div>

@code{

    List<Article> articles = new List<Article>();
    List<ArticleId> Liked = new List<ArticleId>();

    protected override void OnInitialized()
    {
        articles = ArticleService.GetArticles();
        Liked = ArticleService.GetLiked(IHttp.HttpContext.User.Identity.Name);
        if (IHttp.HttpContext != null && !IHttp.HttpContext.User.Identity.IsAuthenticated)
        {
            articles = articles.Where(x => x.Visible == true).ToList();
        }
        
        var lol = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
    }

    public void ViewArticle(int id)
    {
        NavigationManager.NavigateTo($"articleview/{id}");
    }
    public void EditArticle(int id)
    {
        NavigationManager.NavigateTo($"editarticle/{id}");
    }
    public void DeleteArticle(int id)
    {
        ArticleService.DeleteArticle(id);
    }

    public void LikeArticle(int article)
    {
        ArticleService.LikeArticle(article,IHttp.HttpContext.User.Identity.Name);
    }
    public void UnLikeArticle(int article)
    {
        ArticleService.UnlikeArticle(article,IHttp.HttpContext.User.Identity.Name);
    }
    
}